@page
@model StaffPortal.API.Pages.AdminModel
@{
    ViewData["Title"] = "Admin";
}

<a href="Home">Go Back to Home Page</a>
<br />
<br />

<h1>Admin Page</h1>

<!-- Add Staff Form -->
<form method="post" asp-page-handler="OnPost" asp-page="Admin" onsubmit="return validateEmployeeNumber()">
    @Html.AntiForgeryToken()

    <div>
        <label for="employeeNumber">Employee Number:</label>
        <input type="text" id="employeeNumber" name="NewStaff.EmployeeNumber" required />
        <span id="employeeNumberError" style="color: red;"></span>
    </div>

    <div>
        <label for="firstName">First Name:</label>
        <input type="text" id="firstName" name="NewStaff.FirstName" required />
    </div>

    <div>
        <label for="lastName">Last Name:</label>
        <input type="text" id="lastName" name="NewStaff.LastName" required />
    </div>

    <div>
        <label for="dateOfBirth">Date of Birth:</label>
        <input type="date pattern="\d{2}/\d{2}/\d{4}" id="dateOfBirth" name="NewStaff.DateOfBirth" required />
    </div>

    <div>
        <label for="YearsOfWorkExperience">Years of Work Experience:</label>
        <input type="text" id="YearsOfWorkExperience" name="NewStaff.YearsOfWorkExperience" required />
    </div>

    <div>
        <label for="gender">Gender:</label>
        <select id="gender" name="NewStaff.GenderId" required>
            <option value="">Select Gender</option>
            @if (Model.Genders != null)
            {
                @foreach (var gender in Model.Genders)
                {
                    <option value="@gender.Id">@gender.Description</option>
                }
            }
        </select>
    </div>

    <div>
        <label for="qualification">Qualification:</label>
        <select id="qualification" name="NewStaff.QualificationId" required>
            <option value="">Select Qualification</option>
            @if (Model.Qualifications != null)
            {
                @foreach (var qualification in Model.Qualifications)
                {
                    <option value="@qualification.Id">@qualification.Description</option>
                }
            }
        </select>
    </div>

    <button type="submit">Add Staff</button>
</form>

<!-- Display success message -->
@if (!string.IsNullOrEmpty(Model.SuccessMessage))
{
    <div style="color:green">@Model.SuccessMessage</div>
}

<!-- Display validation errors -->
@if (Model.ValidationErrors.Any())
{
    <div>
        <ul>
            @foreach (var error in Model.ValidationErrors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<!-- Display Staff Records -->
<h2>Staff Records</h2>
<table border="1">
    <thead>
        <tr>
            <th>Employee Number</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Date of Birth</th>
            <th>Years of Experience</th>
            <th>Salary</th>
            <th>Gender</th>
            <th>Qualification</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if(Model.StaffList != null)
        {
            foreach (var staff in Model.StaffList)
            {
                <tr>
                    <td>@staff.EmployeeNumber</td>
                    <td>@staff.FirstName</td>
                    <td>@staff.LastName</td>
                    <td>@staff.DateOfBirth.ToShortDateString()</td>
                    <td>@staff.YearsOfWorkExperience</td>
                    <td>@staff.Salary</td>
                    <td>@(Model.Genders.FirstOrDefault(g => g.Id == staff.GenderId)?.Description ?? "N/A")</td>
                    <td>@(Model.Qualifications.FirstOrDefault(q => q.Id == staff.QualificationId)?.Description ?? "N/A")</td>
                    <td>
                        <button type="button" onclick="confirmDelete('@staff.Id')">Delete</button>
                    </td>


                </tr>
            }
        }
    </tbody>
</table>
<script>
    async function confirmDelete(employeeNumber) {
        if (confirm('Are you sure you want to delete this staff record?')) {
            const response = await fetch(`/api/Staff/${employeeNumber}`, {
                method: 'DELETE'
            });

            if (response.ok) {
                location.reload(); // Reload the page
            } else {
                const error = await response.text();
                alert(`Failed to delete staff record: ${error}`);
            }
        }
    }
</script>

@*<script>
    async function validateEmployeeNumber() {
        // Get the entered employee number
        const employeeNumber = document.getElementById("employeeNumber").value;

        // Make an AJAX request to check if the employee number exists
        const response = await fetch(`/api/Staff/CheckEmployeeNumberExists?employeeNumber=${employeeNumber}`);
        const data = await response.json();

        // If employee number exists, display error message and prevent form submission
        if (data.exists) {
            document.getElementById("employeeNumberError").innerText = "Employee number already exists.";
            return false; // Prevent form submission
        }

        // Clear any previous error message
        document.getElementById("employeeNumberError").innerText = "";

        // Employee number is unique, allow form submission
        return true;
    }
</script>*@

